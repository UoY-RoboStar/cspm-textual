/********************************************************************************
 * Copyright (c) 2024 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Pedro Ribeiro - initial definition
 ********************************************************************************/

grammar robostar.CSPM with org.eclipse.xtext.common.Terminals hidden(WS, NEWLINE, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate cspm "http://robostar.cs.york.ac.uk/CSPM"

/***************************************************************************************
 * Top-level CSPM
 ***************************************************************************************/
CSPM:
	{CSPM} Definitions?
;

fragment Definitions hidden(WS):
	AllowedSpace*
	definitions+=Definition (AllowedSpace+ definitions+=Definition)* 
	AllowedSpace*
;

fragment EmptyDefinitions hidden(WS):
	AllowedSpace*
	(definitions+=Definition)? (AllowedSpace+ definitions+=Definition)* 
	AllowedSpace*
;

fragment AllowedSpace:
	(NEWLINE | SL_COMMENT | ML_COMMENT)
;

QualifiedName:
	VALIDID ('::' VALIDID)*
;

/***************************************************************************************
 * Terminals
 ***************************************************************************************/
terminal CHAR: "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'")) "'";
@Override 
terminal WS: (' '|'\t')+;
terminal NEWLINE: ('\r'|'\n')+;
@Override 
terminal ML_COMMENT	: '{-' -> '-}';
@Override 
terminal SL_COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')?;
@Override 
terminal ID  		: ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ("'")*;
@Override 
terminal STRING:	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

VALIDID: ID | KEYWORD;
// TODO: Add all the other keywords.
KEYWORD: 'F'|'T'|'FD'|'has'|'free'|'deadlock'|'deterministic'|'divergence'; 
/***************************************************************************************
 * Definitions
 ***************************************************************************************/
Definition:
		Include 
	|	Assertion
	|	ChannelList
	| 	DataType
	|	SubType
	|	NameType
	| 	PrintStatement
	|	External
	|	Transparent
	|	Function
	| 	TimedSection
	|	Module
	|   ModuleInstance
	| 	TypeAnnotation
;

/***************************************************************************************
 * Imports and miscellaneous functions
 ***************************************************************************************/
External:
	'external' NEWLINE* externals+=externals (NEWLINE* ',' NEWLINE* externals+=externals)*
;

Transparent:
	'transparent' NEWLINE* transparents+=transparents (NEWLINE* ',' NEWLINE* transparents+=transparents)*
;

Include:
	'include' NEWLINE* importURI=STRING
;

/***************************************************************************************
 * Assertions
 ***************************************************************************************/
Assertion:
	'assert' NEWLINE* (
		RefinementAssertion |
		DeadlockAssertion |
		DivergenceAssertion |
		DeterminismAssertion |
		HasTraceAssertion
	)
;

RefinementAssertion:
	negated='not'? NEWLINE* proc=Expression NEWLINE* RefinementSemantic //check=Check
;

fragment RefinementSemantic hidden():
	'[' model=SemanticModel '=' (NEWLINE | WS)* implementation=Expression
;

DeadlockAssertion:
	negated='not'? NEWLINE* proc=Expression NEWLINE* ':[' 'deadlock' 'free' ('[' model=SemanticModel ']')? ']'
;

DivergenceAssertion:
	negated='not'? NEWLINE* proc=Expression NEWLINE* ':[' 'divergence' 'free' ('[' model=SemanticModel ']')? ']'
;

DeterminismAssertion:
	negated='not'? NEWLINE* proc=Expression NEWLINE* ':[' 'deterministic' ('[' model=SemanticModel ']')? ']'
;

HasTraceAssertion:
	negated='not'? NEWLINE* proc=Expression NEWLINE* ':[' 'has' 'trace' ']:' NEWLINE* trace=Expression
;

enum SemanticModel:
	TRACES = 'T' |
	FAILURES = 'F' |
	FAILURESDIVERGENCES = 'FD'
;

/***************************************************************************************
 * Timed section
 ***************************************************************************************/
TimedSection:
	{TimedSection} 'Timed' NEWLINE* '(' NEWLINE* expr=Expression NEWLINE* ')' NEWLINE* '{' Definitions '}'
;

/***************************************************************************************
 * Type and channel declarations
 ***************************************************************************************/
ChannelList:
	'channel' NEWLINE* channels+=Channel (NEWLINE* ',' NEWLINE* channels+=Channel)* (NEWLINE* ':' NEWLINE* type=Expression)? 
;

Channel returns NameDecl:
	{Channel} name=VALIDID
;

DataType returns NameDecl:
	{DataType} 'datatype' NEWLINE* name=VALIDID NEWLINE* '=' NEWLINE* constructors+=Constructor (NEWLINE* '|' NEWLINE* constructors+=Constructor)*
;

SubType returns NameDecl:
	{SubTyoe} 'subtype' NEWLINE* name=VALIDID NEWLINE* '=' NEWLINE* constructors+=Constructor (NEWLINE* '|' NEWLINE* constructors+=Constructor)*
;

NameType returns NameDecl:
	{NameType} 'nametype' NEWLINE* name=VALIDID NEWLINE* '=' NEWLINE* type=Expression
;

Constructor returns NameDecl:
	{Constructor} name=VALIDID (NEWLINE* '.' NEWLINE* type=Expression)?
;

/***************************************************************************************
 * Modules
 ***************************************************************************************/
Module:
	{Module} 'module' NEWLINE* name=VALIDID ('(' NEWLINE* params+=Pattern (NEWLINE* ',' NEWLINE* params+=Pattern)* NEWLINE* ')')?
	EmptyDefinitions
	'exports'
	EmptyDefinitions
	'endmodule'
;

ModuleInstance:
	'instance' NEWLINE* name=VALIDID NEWLINE* '=' NEWLINE* ref=[Module|QualifiedName] ('(' NEWLINE* args+=Expression (NEWLINE* ',' NEWLINE* args+=Expression)* NEWLINE* ')')?
;

/***************************************************************************************
 * Statements
 ***************************************************************************************/
PrintStatement:
	'print' expr=Expression
;

// This can be either a function or a constant. If it's a function,
// then can optionally use pattern matching.
//
// NOTE: Unlike FDR, we do not support a function declaration with no arguments,
//		 that is, f() = e, is invalid here. While FDR does allow such a declaration,
//		 it does not seem sensible to support it.
//
//		 FDR also allows empty pattern matching via multiple empty argument functions:
//		 f() = e
//		 f() = f
//		 which adopt the upper definition f() = e.
Function returns NameDecl hidden(WS):
	{Function} name=VALIDID NEWLINE* ('(' NEWLINE* args+=Pattern (NEWLINE* ',' NEWLINE* args+=Pattern)* NEWLINE* ')')? NEWLINE* '=' NEWLINE* expr=Expression
;

/***************************************************************************************
 * Patterns
 ***************************************************************************************/
WildCardPattern returns Pattern:
	{WildCardPattern} '_'
;

VariablePattern returns NameDecl:
	{VariablePattern} name=VALIDID
;

BasicPattern returns Pattern:
	VariablePattern | 
	WildCardPattern |
	ListPattern |
	LiteralPattern |
	ParenthesesPattern |
	SetPattern |
	TuplePattern
;

// left-associative, binds tighter than Concat.
ConcatPattern returns Pattern:
	BasicPattern ({ConcatPattern.left=current} NEWLINE* '^' NEWLINE* right=BasicPattern)*
;

// right-associative, binds less tighter than Concat.
Pattern returns Pattern:
	ConcatPattern ({DotPattern.left=current} NEWLINE* '.' NEWLINE* right=ConcatPattern)?
;

ListPattern returns Pattern:
	{ListPattern} '<' NEWLINE* (patterns+=Pattern)? (NEWLINE* ',' NEWLINE* patterns+=Pattern)* NEWLINE* '>'
;

LiteralPattern returns Pattern:
	{IntPattern} value=INT |
	{StringPattern} value=STRING |
	{CharPattern} value=CHAR
;

ParenthesesPattern returns Pattern:
	{ParenthesesPattern} NEWLINE* '(' NEWLINE* pattern=Pattern NEWLINE* ')'
;

SetPattern returns Pattern:
	{Set} '{' NEWLINE* (pattern=Pattern)? NEWLINE* '}'
;

TuplePattern returns Pattern:
	{TuplePattern} '(' NEWLINE* patterns+=Pattern (NEWLINE* ',' NEWLINE* patterns+=Pattern)* NEWLINE* ')'
;

/***************************************************************************************
 * Expressions
 * 
 * See https://cocotec.io/fdr/manual/cspm/syntax.html for precedence information.
 ***************************************************************************************/ 
ProjectExp returns Expression:
	BasicExpression (
		{ProjectExp.left=current} NEWLINE* '|\\' NEWLINE* right=BasicExpression
	)*
;

// ParserRule
RenameExp returns Expression:
	// RuleCall, followed by a Group?:
	ProjectExp 
		({RenameExp.left=current} NEWLINE* '[[' NEWLINE* pairs+=RenamingPair (NEWLINE* ',' NEWLINE* pairs+=RenamingPair)* NEWLINE*
		('|' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)*)? NEWLINE* ']]'
	)?
;

ConcatExp returns Expression:
	RenameExp (
		{ConcatExp.left=current} NEWLINE* '^' NEWLINE* right=RenameExp
	)*
;

ListLengthExp returns Expression:
	ConcatExp (
		{ListLengthExp.left=current} NEWLINE* '#' NEWLINE* right=ConcatExp
	)*
;

MultDivMod returns Expression:
	ListLengthExp (
		{MultExp.left=current} NEWLINE* '*' NEWLINE* right=ListLengthExp |
		{DivExp.left=current} NEWLINE* '/' NEWLINE* right=ListLengthExp |
		{ModExp.left=current} NEWLINE* '%' NEWLINE* right=ListLengthExp
	)*
;

PlusMinus returns Expression:
	MultDivMod (
		{PlusExp.left=current} NEWLINE* '+' NEWLINE* right=MultDivMod |
		{MinusExp.left=current} NEWLINE* '-' NEWLINE* right=MultDivMod
	)*
;

ComparisonExp2 returns Expression:
	PlusMinus ({LessThanOrEqualExp.left=current} NEWLINE* '<=' NEWLINE* right=PlusMinus |
			{LessThanExp.left=current} NEWLINE* '<' NEWLINE* right=PlusMinus |
			{GreaterThanOrEqualExp.left=current} NEWLINE* '>=' NEWLINE* right=PlusMinus |
			{EqualsExp.left=current} NEWLINE* '==' NEWLINE* right=PlusMinus |
			{NotEqualsExp.left=current} NEWLINE* '!=' NEWLINE* right=PlusMinus)?
;

// The following separate rule is needed because > is also used to terminate
// a list expression.
ComparisonExp returns Expression:
	ComparisonExp2 
		(	{GreaterThanExp.left=current} NEWLINE* '>' NEWLINE* right=ComparisonExp2 
		)?
;

NotExp returns Expression:
	ComparisonExp ({NotExp.left=current} NEWLINE* 'not' NEWLINE* right=ComparisonExp)*
;

AndExp returns Expression:
	NotExp ({AndExp.left=current} NEWLINE* 'and' NEWLINE* right=NotExp)*
;

OrExp returns Expression:
	AndExp ({OrExp.left=current} NEWLINE* 'or' NEWLINE* right=AndExp)*
;

ColonExp returns Expression:
	OrExp ({ColonExp.left=current} NEWLINE* ':' NEWLINE* right=OrExp)?
;

DotExp returns Expression:
	ColonExp ({DotExp.left=current} NEWLINE* '.' NEWLINE* right=DotExp)?
;

// ?e?x.y:{0.1} is possible
Decoration returns Expression:
	DotExp 
		({InputExp.left=current} NEWLINE* '?' NEWLINE* right=Pattern NEWLINE* (':' NEWLINE* expr=Expression)? | 
		 {OutputExp.left=current} NEWLINE* '!' NEWLINE* right=DotExp | 
		 {NondeterministicInput.left=current} NEWLINE* '$' NEWLINE* right=Pattern NEWLINE* (':' NEWLINE* expr=Expression)?
		)*
;

GPrefix returns Expression:
	Decoration (
		{Prefix.left=current} NEWLINE* '->' NEWLINE* right=GPrefix |
		{GuardedExpression.left=current} NEWLINE* '&' NEWLINE* right=GPrefix
	)?
;

SequentialComposition returns Expression:
	GPrefix ({SequentialComposition.left=current} NEWLINE* ';' NEWLINE* right=GPrefix)*
;

SlidingChoice returns Expression:
	SequentialComposition ({SlidingChoice.left=current} NEWLINE* '[>' NEWLINE* right=SequentialComposition)*
;

Interrupt returns Expression:
	SlidingChoice (
		({Interrupt.left=current} NEWLINE* '/\\' NEWLINE* right=SlidingChoice) |
		({SynchronisingInterrupt.left=current} NEWLINE* '/+' cs=Expression '+\\' NEWLINE* right=SlidingChoice)
	)*
;

ExternalChoice returns Expression:
	Interrupt (
		({ExternalChoice.left=current} NEWLINE* '[]' NEWLINE* right=Interrupt) | 
		({SynchronisingExternalChoice.left=current} NEWLINE* '[+' cs=Expression '+]' NEWLINE* right=Interrupt)
	)* 
;

InternalChoice returns Expression:
	ExternalChoice ({InternalChoice.left=current} NEWLINE* '|~|' NEWLINE* right=ExternalChoice)*
;

EGA returns Expression:
	InternalChoice (
		'[|' NEWLINE* ( 		// Ambiguous, which implies backtracking for the parser.
			 		{Exception.left=current} cset=Expression NEWLINE* '|>' NEWLINE* right=InternalChoice 
			 	| 	{GeneralisedParallel.left=current} cset=Expression  NEWLINE* '|]' NEWLINE* right=InternalChoice )
		|	{AlphabetisedParallel.left=current} NEWLINE* '[' NEWLINE* lset=Expression NEWLINE* '||' NEWLINE* rset=Expression NEWLINE* ']' NEWLINE* right=InternalChoice 
		|	{LinkedParallel.left=current} NEWLINE* '[' NEWLINE* links+=Link NEWLINE* ('|' NEWLINE* stmts+=Statement (NEWLINE* ',' stmts+=Statement)*)? NEWLINE* ']' NEWLINE* right=InternalChoice
	 )?
;

Link:
	left=Expression NEWLINE* '<->' NEWLINE* right=Expression
;

Interleave returns Expression:
	EGA ({Interleave.left=current} NEWLINE* '|||' NEWLINE* right=EGA)*
;

Hide returns Expression:
	Interleave ({Hide.left=current} NEWLINE* '\\' NEWLINE* right=Interleave)*
;

DoublePatternExp returns Expression:
	Hide ({DoublePatternExp.left=current} NEWLINE* '@@' NEWLINE* right=Hide)?
;

BasicExpression returns Expression:
	CoreProcess |
	CoreSingletonProcess |
	FunctionExp |
	{ParExp} NEWLINE* '(' NEWLINE* expr=Expression NEWLINE* ')' |
	{TupleExp} NEWLINE* '(' NEWLINE* expr+=Expression NEWLINE* ',' NEWLINE* expr+=Expression (NEWLINE* ',' NEWLINE* expr+=Expression)* NEWLINE* ')' |
	PRef |
	StatementExpression |
	{IntegerExp} value=INT |
	{LambdaExp} '\\' NEWLINE* patterns+=Pattern NEWLINE* (NEWLINE* ',' NEWLINE* patterns+=Pattern)* NEWLINE* '@' NEWLINE* expr=Expression |
	{StringExp} value=STRING |
	{CharExp} value=CHAR |
	{MapExp} '(|' NEWLINE* mapping+=Mapping NEWLINE* (NEWLINE* ',' NEWLINE* mapping+=Mapping)* NEWLINE* '|)' |
	{TrueExp} ('True'|'true') |
	{FalseExp} ('False'|'false') |
	{UnaryNotExp} 'not' NEWLINE* expr=Expression |
	{Events} 'Events' |
	{Char} 'Char' |
	{Int} 'Int' |
	{Proc} 'Proc' 
;

CoreSingletonProcess:
	{Stop} 'STOP' |
	{Skip} 'SKIP'
;

CoreProcess:
	{Chaos} 'CHAOS' SingleArgFunction |
	{Run} 'RUN' SingleArgFunction |
	{Wait} 'WAIT' SingleArgFunction
;

FunctionExp:
	CoreFunction | CompressionFunction | RelationFunction | DotFunction
;

CoreFunction:
	{Error} 'error' SingleArgFunction |
	{Show} 'show' SingleArgFunction |
	{SetCard} 'card' SingleArgFunction |
	{SetDiff} 'diff' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{SetEmpty} 'empty' SingleArgFunction |
	{SetlInter} 'inter' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{SetbInter} 'Inter' SingleArgFunction |
	{SetMember} 'member' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{LSeq} 'seq' SingleArgFunction |
	{BSeq} 'Seq' SingleArgFunction |
	{Set}  'Set' SingleArgFunction |
	{SetLUnion} 'union' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{SetBUnion} 'Union' SingleArgFunction |
	{SequenceConcat} 'concat' SingleArgFunction |
	{SequenceElem} 'elem' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{SequenceHead} 'head' SingleArgFunction |
	{SequenceLength} 'length' SingleArgFunction |
	{SequenceNull} 'null' SingleArgFunction |
	{SequenceSet} 'set' SingleArgFunction |
	{SequenceTail} 'tail' SingleArgFunction |
	{EmptyMap} 'emptyMap' SingleArgFunction |
	{MapDelete} 'mapDelete' SingleArgFunction |
	{MapFromList} 'mapFromList' SingleArgFunction |
	{MapLookup} 'mapLookup' SingleArgFunction |
	{MapMember} 'mapMember' SingleArgFunction |
	{MapToList} 'mapToList' SingleArgFunction |
	{MapUpdate} 'mapUpdated' SingleArgFunction |
	{MapUpdateMultiple} 'mapUpdateMultiple' SingleArgFunction |
	{Map} 'Map' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')'
;

CompressionFunction:
	{Chase} 'chase' SingleArgFunction |
	{ChaseNoCache} 'chase_nocache' SingleArgFunction |
	{Deter} 'deter' SingleArgFunction |
	{Diamond} 'diamond' SingleArgFunction |
	{Dbisim} 'dbisim' SingleArgFunction |
	{Explicate} 'explicate' SingleArgFunction |
	{LazyEnumerate} 'lazyenumerate' SingleArgFunction |
	{FailureWatchdog} 'failure_watchdog' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{Normal} 'normal' SingleArgFunction |
	{Prioritise} 'prioritise' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{PrioritiseNoCache} 'prioritise_nocache' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{PrioritisePo} 'prioritisepo' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{Sbisim} 'sbisim' SingleArgFunction |
	{TauLoopFactor} 'tau_loop_factor' SingleArgFunction |
	{TraceWatchdog} 'trace_watchdog' NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ',' NEWLINE* args+=Expression NEWLINE* ')' |
	{TimedPriority} 'timed_priority' SingleArgFunction |
	{Wbisim} 'wbisim' SingleArgFunction
;

enum externals:
	CHASE = 'chase' |
	CHASE_NO_CACHE = 'chase_no_cache' |
	DETER = 'deter' |
	FAILURE_WATCHDOE = 'failure_watchdog' |
	PRIORITISE = 'prioritise' |
	PRIORITISE_NOCACHE = 'prioritise_nocache' |
	PRIORITISEPO = 'prioritisepo' |
	TRACE_WATCHDOG = 'trace_watchdog' |
	MTRANSCLOSE = 'mtransclose' |
	RELATIONAL_IMAGE = 'relational_image' |
	RELATIONAL_INVERSE_IMAGE = 'relational_inverse_image' |
	TRANSPOSE = 'transpose'
;

enum transparents:
	DIAMOND = 'diamond' |
	DBISIM = 'dbisim' |
	EXPLICATE = 'explicate' |
	LAZYENUMERATE = 'lazyenumerate' |
	NORMAL = 'normal' |
	SBISIM = 'sbisim' |
	TAU_LOOP_FACTOR = 'tau_loop_factor' |
	WBISIM = 'wbisim'
;

RelationFunction:
	{MTransClose} 'mtransclose' SingleArgFunction |
	{RelationalImage} 'relational_image' SingleArgFunction |
	{RelationalInverseImage} 'relational_inverse_image' SingleArgFunction |
	{Transpose} 'transpose' SingleArgFunction
;

DotFunction:
	{Extensions} 'extensions' SingleArgFunction |
	{Productions} 'productions' SingleArgFunction
;

fragment SingleArgFunction:
	NEWLINE* '(' NEWLINE* args+=Expression NEWLINE* ')'
;

RenamingPair:
	from=Expression NEWLINE* '<-' NEWLINE* to=Expression
;

StatementExpression returns Expression:
	SetExp | RangedSetExp | ListExp | RangedListExp | EnumeratedSetExp
;

// We have ComparisonExp2 rather than anything above, because otherwise a string such as <2>1> would be accepted,
// in which case should it could be a list <2> followed by an ill-formed string, or a list whose first element is an expression
// comparison? We eliminate the second interpretation, which is what FDR does as well.
ListExp returns StatementExpression:
	{ListExp} '<' NEWLINE* (exprs+=ComparisonExp2 (NEWLINE* ',' NEWLINE* exprs+=ComparisonExp2)*)? (NEWLINE* '|' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)*)? NEWLINE* '>'
;

RangedListExp returns StatementExpression:
	{RangedListExp} '<' NEWLINE* left=Expression NEWLINE* '..' NEWLINE* right=Expression (NEWLINE* '|' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)*)? NEWLINE* '>'
;

SetExp returns StatementExpression:
	{SetExp} '{' NEWLINE* (exprs+=Expression (NEWLINE* ',' NEWLINE* exprs+=Expression)*)? (NEWLINE* '|' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)*)? NEWLINE* '}'
;

RangedSetExp returns StatementExpression:
	{RangedSetExp} '{' NEWLINE* left=Expression '..' NEWLINE* right=Expression (NEWLINE* '|' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)*)? NEWLINE* '}'
;

EnumeratedSetExp returns StatementExpression:
	{EnumeratedSetExp} '{|' NEWLINE* (exprs+=Expression (NEWLINE* ',' NEWLINE* exprs+=Expression)*)? (NEWLINE* '|' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)*)? NEWLINE* '|}'
;

Mapping:
	left=Expression NEWLINE* '=>' NEWLINE* right=Expression
;

PRef:
	{PRef} ref=[NameDecl|QualifiedName] (NEWLINE* '(' NEWLINE* args+=Expression (NEWLINE* ',' NEWLINE* args+=Expression)* NEWLINE* ')')?
;

LetExp returns Expression hidden(WS):
	{LetExp} 'let'
		AllowedSpace*
		definitions+=Definition (AllowedSpace+ definitions+=Definition)* 
		AllowedSpace*
	'within' NEWLINE*
		expr=Expression
;

IfThenElse returns Expression:
	'if' NEWLINE* condition=Expression NEWLINE* 'then' NEWLINE* true=Expression NEWLINE* 'else' NEWLINE* false=Expression
;

Expression hidden(WS):
	LetExp | IfThenElse | ReplicatedOps | DoublePatternExp
;

BinaryExpression returns Expression:
	GPrefix | Mapping | Hide | Interleave | EGA | ExternalChoice | InternalChoice | Interrupt |
	SlidingChoice | SequentialComposition | GPrefix | Decoration | DotExp | ColonExp |
	AndExp | OrExp | ComparisonExp | ComparisonExp2 | PlusMinus | MultDivMod | ListLengthExp |
	ConcatExp | RenameExp | ProjectExp
;

// Replicated operators

ReplicatedOps:
	{ReplicatedAlphabetisedParallel} '||' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)* NEWLINE* '@' NEWLINE* '[' NEWLINE* cset=Expression NEWLINE* ']' expr=Expression |
	{ReplicatedExternalChoice} '[]' NEWLINE* stmts+=Statement (NEWLINE* ','NEWLINE*  stmts+=Statement)* NEWLINE* '@' NEWLINE* expr=Expression |
	{ReplicatedGeneralisedPrallel} '[|' NEWLINE* cset=Expression NEWLINE* '|]' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)* NEWLINE* '@' NEWLINE* expr=Expression |
	{ReplicatedInterleave} '|||' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)* NEWLINE* '@' NEWLINE* expr=Expression |
	{ReplicatedInternalChoice} '|~|' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)* NEWLINE* '@' NEWLINE* expr=Expression |
	{ReplicatedLinkedParallel} '[' NEWLINE* links+=Link (NEWLINE* ',' NEWLINE* links+=Link)* (NEWLINE* '|' NEWLINE* lstmts+=Statement (NEWLINE* ',' NEWLINE* lstmts+=Statement)*)? NEWLINE* ']' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)* NEWLINE* '@' NEWLINE* expr=Expression |
	{ReplicatedSequentialComposition} ';' NEWLINE* stmts+=Statement (NEWLINE* ',' NEWLINE* stmts+=Statement)* NEWLINE* '@' NEWLINE* expr=Expression |
	{ReplicatedSynchronisingParallel} '[+' NEWLINE* cset=Expression NEWLINE* '+]' NEWLINE* '@' NEWLINE* expr=Expression
;

/***************************************************************************************
 * Statements
 ***************************************************************************************/
Statement:
	GeneratorStatement |
	SetGeneratorStatement |
	{PredicateStatement} expr=Expression
;

GeneratorStatement:
	pattern=Pattern NEWLINE* '<-' NEWLINE* expr=Expression
;

// This option is supported by FDR, but the official syntax is unclear in the manual.
SetGeneratorStatement:
	pattern=Pattern NEWLINE* ':' NEWLINE* expr=Expression
;

/***************************************************************************************
 * Type annotations
 ***************************************************************************************/
TypeAnnotation:
	{TypeAnnotation} ref=[Function] (NEWLINE* ',' NEWLINE* refs+=[Function])* NEWLINE* '::' NEWLINE* (
		constraints+=Constraint NEWLINE* '=>' |
		'(' NEWLINE* constraints+=Constraint (NEWLINE* ',' NEWLINE* constraints+=Constraint) NEWLINE* ')' NEWLINE* '=>'
	)? NEWLINE* type=TypeConstructor
;

Constraint:
	typeConstraint=TypeConstraint type=TypeVariable
;

TypeConstructor returns TypeExpression:
	TypeExpression (
		  {DotType.left=current} NEWLINE* '.' NEWLINE* right=TypeConstructor
		| {DotableType.left=current} NEWLINE* '=>' NEWLINE* right=TypeConstructor
		| {ExtendableType.left=current} NEWLINE* '=>*' NEWLINE* right=TypeConstructor
		| {FunctionType.left=current} NEWLINE* '->' NEWLINE* right=TypeConstructor
	)*
;

TypeExpression returns TypeExpression:
	   TypeVariable
	 | {SetType} '{' NEWLINE* type=TypeConstructor NEWLINE* '}'
	 | {MapType} '(|' NEWLINE* key=TypeConstructor NEWLINE* '=>' NEWLINE* value=TypeConstructor NEWLINE* '|)' 
	 | {SequenceType} '<' NEWLINE* type=TypeConstructor NEWLINE* '>' 
	 | {TupleType} '(' NEWLINE* types+=TypeConstructor (NEWLINE* ',' NEWLINE* types+=TypeConstructor)* NEWLINE* ')'
	 | {IntType} 'Int' 
	 | {BoolType} 'Bool' 
	 | {CharType} 'Char'
	 | {EventType} 'Event' 
	 | {ProcType} 'Proc'
;

TypeVariable returns TypeExpression:
	{TypeVariable} name=VALIDID
;

enum TypeConstraint:
	EQ = 'Eq' |
	COMPLETE = 'Complete' |
	ORD = 'Ord' |
	SET = 'Set' |
	YIELDABLE = 'Yieldable'
;
